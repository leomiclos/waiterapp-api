# WaiterApp API

API RESTful desenvolvida em TypeScript e Express para o **WaiterApp**, um sistema de gerenciamento de pedidos voltado para gar√ßons e estabelecimentos gastron√¥micos.
Gerencia categorias, produtos e pedidos com persist√™ncia em **MongoDB via container Docker**.

---

## üìÅ Estrutura do projeto

.
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ app/
‚îÇ       ‚îú‚îÄ‚îÄ models/
‚îÇ       ‚îú‚îÄ‚îÄ useCases/
‚îÇ   
‚îÇ   ‚îî‚îÄ‚îÄ index.ts
    ‚îî‚îÄ‚îÄ router.ts
‚îú‚îÄ‚îÄ dist/
‚îú‚îÄ‚îÄ Dockerfile
‚îú‚îÄ‚îÄ docker-compose.yml
‚îú‚îÄ‚îÄ package.json
‚îú‚îÄ‚îÄ tsconfig.json
‚îî‚îÄ‚îÄ README.md

---

## ‚úÖ Pr√©-requisitos

* [Node.js](https://nodejs.org/) (recomendado: vers√£o 18 ou superior)
* [Docker](https://www.docker.com/) e [Docker Compose](https://docs.docker.com/compose/)

---

## üöÄ Iniciando o projeto

### 1. Clonar o reposit√≥rio


git clone https://github.com/seu-usuario/waiterapp-api.git
cd waiterapp-api


### 2. Instalar as depend√™ncias

npm install


### 3. Criar o arquivo `.env`

Na raiz do projeto, crie um arquivo chamado `.env` com o seguinte conte√∫do:

MONGO_URL=mongodb://localhost:27017/waiterapp
PORT=3001

> Altere a `MONGO_URL` conforme o ambiente (Docker/local/produ√ß√£o).

### 4. Rodar localmente em modo desenvolvimento


npm run dev


### 5. Gerar build para produ√ß√£o


npm run build
npm start



## üê≥ Rodando com Docker

### 1. Subir a stack com MongoDB e a API


docker-compose up


Isso ir√° iniciar:

* Um container do **MongoDB** na porta `27017`
* A **API** na porta `3001`

### 2. Acessar a API

Com os containers em execu√ß√£o, acesse:

http://localhost:3001

---

## üõ† Tecnologias

* Node.js
* Express
* TypeScript
* MongoDB
* Mongoose
* Docker e Docker Compose
* ESLint e Prettier

